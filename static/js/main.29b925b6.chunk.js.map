{"version":3,"sources":["logo.svg","sideBar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MySidebar","items","className","List","disablePadding","dense","map","label","name","rest","ListItem","key","button","ListItemText","makeStyles","theme","root","marginTop","spacing","library","add","faTrash","faCheckCircle","App","props","handleInput","e","setState","currentItem","task","target","value","Date","now","addItem","preventDefault","state","newItem","pendingItems","localStorage","setItem","JSON","stringify","console","log","deleteItem","type","itemKey","filteredItems","filter","item","completedItems","markComplete","completedItem","find","parse","getItem","this","id","onSubmit","placeholder","onChange","React","Component","TaskList","handlePagination","event","page","changeState","pageSize","currentPage","sort","a","b","noOfPagesRequired","Math","ceil","length","itemList","slice","icon","onClick","Moment","format","Pagination","count","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29b925b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\n\nfunction MySidebar({ items }) {\n  return (\n    <div className=\"sidebar\">\n      <List disablePadding dense>\n        {items.map(({ label, name, ...rest }) => (\n          <ListItem key={name} button {...rest}>\n            <ListItemText>{label}</ListItemText>\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  )\n}\n\nexport default MySidebar;","import React from 'react';\nimport Moment from 'moment';\nimport logo from './logo.svg';\nimport './App.css';\nimport MySidebar from './sideBar';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Pagination from '@material-ui/lab/Pagination';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\n// const BasicPagination = ({}) => {\n//   const classes = useStyles();\n//   return (\n//     <div className={classes.root}>\n//       <Pagination onChange={handlePagination} count={10} />\n//     </div>\n//   );\n// }\n\n\n\nlibrary.add(faTrash);\nlibrary.add(faCheckCircle);\n\nclass App extends React.Component {\n  \n  constructor(props){\n    super(props);\n    let pendingItems = JSON.parse(localStorage.getItem(\"pendingItems\"))\n    let completedItems = JSON.parse(localStorage.getItem(\"completedItems\"))\n    this.state = {\n      pendingItems: pendingItems || [],\n      completedItems: completedItems || [],\n      currentItem: {\n        task: \"\",\n        key: ''\n      }\n    }\n    this.items = [\n      { name: 'home', label: 'Home' },\n      {\n        name: 'settings',\n        label: 'Settings',\n        items: [{ name: 'profile', label: 'Profile' }],\n      },\n    ]\n\n  }\n\n  handleInput = (e) => {\n    this.setState({\n      currentItem: {\n        task: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  addItem = (e) => {\n    e.preventDefault();\n    if(this.state.currentItem.task === \"\"){\n      return\n    }\n    const newItem = this.state.currentItem;\n    const items = [...this.state.pendingItems, newItem];\n    this.setState({\n      pendingItems: items,\n      currentItem: {\n        task: '',\n        key: ''\n      }\n    })\n    localStorage.setItem(\"pendingItems\", JSON.stringify(items));\n    console.log(this.state)\n  }\n  \n  deleteItem = (type, itemKey) => {\n    \n    if( type === \"Pending\"){\n      const filteredItems = this.state.pendingItems.filter(item => item.key !== itemKey);\n      this.setState({\n        pendingItems: filteredItems\n      })\n      localStorage.setItem(\"pendingItems\", JSON.stringify(filteredItems));\n    }\n    else{\n      const filteredItems = this.state.completedItems.filter(item => item.key !== itemKey);\n      this.setState({\n        completedItems: filteredItems\n      })\n      localStorage.setItem(\"completedItems\", JSON.stringify(filteredItems));\n    }\n    \n  }\n  \n  markComplete = (itemKey) => {\n    const completedItem = this.state.pendingItems.find(item => item.key === itemKey);\n    \n    const filteredItems = this.state.pendingItems.filter(item => item.key !== itemKey);\n    this.setState({\n      pendingItems: filteredItems\n    })\n    completedItem.key = Date.now();\n    let completedItems = [...this.state.completedItems, completedItem];\n    \n    this.setState({\n      pendingItems: filteredItems,\n      completedItems: completedItems\n    })\n    localStorage.setItem(\"pendingItems\", JSON.stringify(filteredItems));\n    localStorage.setItem(\"completedItems\", JSON.stringify(completedItems));\n  }\n\n\n  render(){\n\n    return (\n      <div className=\"App\">\n      <MySidebar items={this.items} />\n      <h1>My TODO List</h1>\n      <div className=\"row\">\n        <form id=\"add-task\" onSubmit={this.addItem}>\n          <input className=\"input\" type=\"text\" placeholder=\"Add task\" value={this.state.currentItem.task} onChange={this.handleInput}/>\n          <button type=\"submit\">Add</button>\n        </form>\n      </div>\n      <div className=\"container\">\n        <TaskList items={this.state.pendingItems} className=\"full_list\" type=\"Pending\" deleteItem={this.deleteItem} markComplete={this.markComplete}/>\n        <TaskList items={this.state.completedItems} className=\"full_list\" type=\"Completed\" deleteItem={this.deleteItem} markComplete={this.markComplete}/>\n      </div>\n\n      </div>\n    );\n  }\n}\n\n\nclass TaskList extends React.Component {\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            pageSize: 4,\n            currentPage: 0\n        }\n    }\n                                \n    handlePagination = (event, page) => {\n        let changeState = this.state;\n        changeState['currentPage'] = page - 1;\n        this.setState(changeState);\n    }\n\n\n    render(){\n        this.props.items.sort((a,b) => (b.key > a.key) ? 1 : ((a.key > b.key) ? -1 : 0));\n        let noOfPagesRequired = Math.ceil(this.props.items.length / this.state.pageSize);\n        this.itemList = this.props.items.slice(this.state.currentPage * this.state.pageSize, (this.state.currentPage + 1)*4).map(item => (\n        <div className=\"item\" key={item.key} >\n            <p className=\"item-data\">\n                {item.task}\n                {this.props.type !== \"Completed\" && <FontAwesomeIcon className=\"faicons\" icon=\"check-circle\" onClick={() => this.props.markComplete(item.key)}/>}\n                <FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick={() => this.props.deleteItem(this.props.type, item.key)}/>\n            </p>\n            <p id=\"date_subscript\"><i><sub><small>Date modified: {Moment(item.key).format(\"DD-MM-YYYY h:mm\")}</small></sub></i></p>\n        </div>\n        ))\n        \n        return(\n            <div className={this.props.className}>\n                <h2>{this.props.type}</h2>\n                <div>\n                    {this.itemList}\n                </div>\n                <Pagination className=\"pagination\" onChange={this.handlePagination} count={noOfPagesRequired}/>\n            </div>\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}